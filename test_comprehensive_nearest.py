#!/usr/bin/env python3
"""
Comprehensive test script to verify nearest place search across all supported regions
Tests the progressive radius search functionality for various address types
"""

import sys
import os

# Add the parent directory to sys.path to import from app.py
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import parse_address_components, estimate_coordinates_from_address, get_comprehensive_contacts

def test_comprehensive_nearest_search():
    """Test nearest place search across all supported regions"""
    
    test_addresses = [
        # Tokyo - Different areas
        ("Êù±‰∫¨ÈÉΩÊñ∞ÂÆøÂå∫Ë•øÊñ∞ÂÆø2-8-1", "Tokyo Metropolitan Government"),
        ("Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫Á•ûÂÆÆÂâç1-1-1", "Shibuya area"),
        ("Êù±‰∫¨ÈÉΩÁ∑¥È¶¨Âå∫Áü≥Á•û‰∫ïÁî∫8-10-16", "Nerima - Shakujii area"),
        ("Êù±‰∫¨ÈÉΩË∂≥Á´ãÂå∫Á´π„ÅÆÂ°ö1-1-1", "Adachi - Takenotsuka"),
        
        # Kanagawa
        ("Á•ûÂ•àÂ∑ùÁúåÊ®™ÊµúÂ∏ÇÊ∏ØÂåóÂå∫Êñ∞Ê®™Êµú2-5-1", "Yokohama - Shin-Yokohama"),
        ("Á•ûÂ•àÂ∑ùÁúåÂ∑ùÂ¥éÂ∏ÇÂ∑ùÂ¥éÂå∫ÈßÖÂâçÊú¨Áî∫1-1", "Kawasaki Station area"),
        
        # Chiba
        ("ÂçÉËëâÁúåÂçÉËëâÂ∏Ç‰∏≠Â§ÆÂå∫‰∏≠Â§Æ1-1-1", "Chiba City Center"),
        ("ÂçÉËëâÁúåÂ∏ÇÂ∑ùÂ∏ÇÂÖ´Âπ°1-1-1", "Ichikawa"),
        
        # Saitama
        ("ÂüºÁéâÁúå„Åï„ÅÑ„Åü„ÅæÂ∏ÇÂ§ßÂÆÆÂå∫Â§ßÈñÄÁî∫1-1", "Omiya"),
        ("ÂüºÁéâÁúåÂ∑ùÂè£Â∏ÇÊú¨Áî∫1-1-1", "Kawaguchi"),
        
        # Yamaguchi Prefecture
        ("Â±±Âè£Áúå‰∏ãÈñ¢Â∏ÇÁ´πÂ¥éÁî∫1-1-1", "Shimonoseki"),
        ("Â±±Âè£ÁúåÂ±±Âè£Â∏ÇÊªùÁî∫1-1", "Yamaguchi City"),
        
        # Hiroshima Prefecture
        ("Â∫ÉÂ≥∂ÁúåÂ∫ÉÂ≥∂Â∏Ç‰∏≠Âå∫Âü∫Áî∫10-52", "Hiroshima City Center"),
        ("Â∫ÉÂ≥∂ÁúåÂëâÂ∏Ç‰∏≠Â§Æ1-1-1", "Kure City"),
        
        # Ibaraki Prefecture
        ("Ëå®ÂüéÁúå„Å§„Åè„Å∞Â∏ÇÁ†îÁ©∂Â≠¶Âúí1-1-1", "Tsukuba Science City"),
        ("Ëå®ÂüéÁúåÊ∞¥Êà∏Â∏ÇÁ¨†ÂéüÁî∫978-6", "Mito City"),
        
        # Yamanashi Prefecture
        ("Â±±Ê¢®ÁúåÁî≤Â∫úÂ∏Ç‰∏∏„ÅÆÂÜÖ1-18-1", "Kofu City Hall"),
        ("Â±±Ê¢®ÁúåÂØåÂ£´ÂêâÁî∞Â∏Ç‰∏ãÂêâÁî∞6-1-1", "Fujiyoshida"),
    ]
    
    print("üéØ Comprehensive Nearest Place Search Test")
    print("=" * 80)
    print("Testing progressive radius search across all supported regions")
    print("Search Pattern: 1km‚Üí2km‚Üí3km‚Üí4km‚Üí5km‚Üí7km‚Üí9km‚Üí11km‚Üí13km‚Üí15km‚Üí17km")
    print("=" * 80)
    
    success_count = 0
    total_tests = len(test_addresses)
    
    for i, (address, description) in enumerate(test_addresses, 1):
        print(f"\n{i}. Testing: {description}")
        print(f"   Address: {address}")
        print("-" * 60)
        
        try:
            # Parse address
            prefecture, city, district = parse_address_components(address)
            print(f"   Parsed: {prefecture} > {city} > {district}")
            
            # Get coordinates
            coords = estimate_coordinates_from_address(address)
            if not coords:
                print("   ‚ùå No coordinates found for address")
                continue
            
            print(f"   Coordinates: {coords[0]:.4f}, {coords[1]:.4f}")
            
            # Get contacts
            contacts = get_comprehensive_contacts(city, district, prefecture, coords)
            
            # Analyze results
            total_contacts = sum(len(contact_list) for contact_list in contacts.values())
            print(f"   Total contacts: {total_contacts}")
            
            if total_contacts == 0:
                print("   ‚ùå No contacts found")
                continue
            
            # Check key services and their distances
            key_services = ['Ë≠¶ÂØüÁΩ≤', 'Ê∂àÈò≤ÁΩ≤', 'ÁóÖÈô¢']
            nearest_found = False
            
            for service_type in key_services:
                service_contacts = contacts.get(service_type, [])
                if service_contacts:
                    closest = service_contacts[0]
                    distance = closest.get('distance_km', 'Unknown')
                    print(f"   üè¢ {service_type}: {closest['name']} ({distance}km)")
                    
                    # Check if we found a reasonably close service
                    if isinstance(distance, (int, float)) and distance <= 20:
                        nearest_found = True
            
            # Test other important services
            other_services = ['Â∏ÇÂå∫Áî∫ÊùëÂΩπÊâÄ', '„Ç¨„Çπ', 'ÈõªÂäõ']
            for service_type in other_services:
                service_contacts = contacts.get(service_type, [])
                if service_contacts:
                    closest = service_contacts[0]
                    distance = closest.get('distance_km', 'Unknown')
                    print(f"   üèõÔ∏è  {service_type}: {closest['name']} ({distance}km)")
            
            if nearest_found or total_contacts >= 5:
                print("   ‚úÖ SUCCESS: Found nearest places successfully")
                success_count += 1
            else:
                print("   ‚ö†Ô∏è  WARNING: Limited results found")
                
        except Exception as e:
            print(f"   ‚ùå ERROR: {str(e)}")
    
    print("\n" + "=" * 80)
    print("üìä TEST SUMMARY")
    print("=" * 80)
    print(f"Total tests: {total_tests}")
    print(f"Successful: {success_count}")
    print(f"Success rate: {(success_count/total_tests)*100:.1f}%")
    
    if success_count == total_tests:
        print("üéâ EXCELLENT: All addresses can find nearest places!")
    elif success_count >= total_tests * 0.8:
        print("‚úÖ GOOD: Most addresses working well")
    else:
        print("‚ö†Ô∏è  NEEDS IMPROVEMENT: Some regions need more data")
    
    print("\nüîç PROGRESSIVE SEARCH ANALYSIS:")
    print("The app uses 11-step radius search to ensure users always get:")
    print("‚Ä¢ Closest emergency services (police, fire, hospital)")
    print("‚Ä¢ Nearest administrative offices")
    print("‚Ä¢ Most convenient utility contacts")
    print("‚Ä¢ Cross-city referencing when local services unavailable")

if __name__ == "__main__":
    test_comprehensive_nearest_search()
